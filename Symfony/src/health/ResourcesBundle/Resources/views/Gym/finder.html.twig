{%  extends 'healthhealthUserBundle::layout.html.twig' %}

{% block head %}
    {% block stylesheets %}
        {% stylesheets '@healthhealthUserBundle/Resources/public/css/*' filter='cssrewrite' %}
        <link href="{{ asset_url }}"  rel="stylesheet">
        <link href="{{ asset_url }}"  rel="stylesheet" >
        <link href="{{ asset_url }}"  rel="stylesheet" >
        {% endstylesheets %}
    {% endblock %}
    <style type="text/css">
        html { height: 70% }
        body { height: 70%; margin: 0; padding: 0 }
        #map-canvas { height: 100% }
    </style>

    {% block javascript %}
        <script src="{{ asset('bundles/healthhealthuser/js/mapscript.js') }}"></script>
    {% endblock %}

    <script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places&sensor=false"></script>

{% endblock %}
{% block main_content %}

    <section class="col-md-8 main_content">

        <h1>Find a Gym</h1>

        <div id="gmap_canvas"></div>
        <div class="actions">
            <div class="button">
                <label for="gmap_where">Where:</label>
                <input id="gmap_where" type="text" name="gmap_where" /></div>
            <div id="button2" class="button" onclick="findAddress(); return false;">Search for address</div>
            <div class="button">
                <label for="gmap_keyword">Keyword (optional):</label>
                <input id="gmap_keyword" type="text" name="gmap_keyword" /></div>
            <div class="button">
                <label for="gmap_type">Type:</label>
                <select id="gmap_type">
                    <option value="gym">gym</option>
                    <option value="fitness">fitness</option>
                    <option value="healthy">Health</option>

                </select>
            </div>
            <div class="button">
                <label for="gmap_radius">Radius:</label>
                <select id="gmap_radius">
                    <option value="500">500</option>
                    <option value="1000">1000</option>
                    <option value="1500">1500</option>
                    <option value="5000">5000</option>
                </select>
            </div>
            <input type="hidden" id="lat" name="lat" value="43.7001100" />
            <input type="hidden" id="lng" name="lng" value="-79.4163000" />
            <div id="button1" class="button" onclick="findPlaces(); return false;">Search for objects</div>
        </div>



    </section>

<script>
    var geocoder;
    var map;
    var markers = Array();
    var infos = Array();

    function initialize() {
        // prepare Geocoder
        geocoder = new google.maps.Geocoder();

        // set initial position (New York)
        var myLatlng = new google.maps.LatLng(40.7143528,-74.0059731);

        var myOptions = { // default map options
            zoom: 14,
            center: myLatlng,
            mapTypeId: google.maps.MapTypeId.ROADMAP
        };
        map = new google.maps.Map(document.getElementById('gmap_canvas'), myOptions);
    }

    // clear overlays function
    function clearOverlays() {
        if (markers) {
            for (i in markers) {
                markers[i].setMap(null);
            }
            markers = [];
            infos = [];
        }
    }

    // clear infos function
    function clearInfos() {
        if (infos) {
            for (i in infos) {
                if (infos[i].getMap()) {
                    infos[i].close();
                }
            }
        }
    }

    // find address function
    function findAddress() {
        var address = document.getElementById("gmap_where").value;

        // script uses our 'geocoder' in order to find location by address name
        geocoder.geocode( { 'address': address}, function(results, status) {
            if (status == google.maps.GeocoderStatus.OK) { // and, if everything is ok

                // we will center map
                var addrLocation = results[0].geometry.location;
                map.setCenter(addrLocation);

                // store current coordinates into hidden variables
                document.getElementById('lat').value = results[0].geometry.location.lat();
                document.getElementById('lng').value = results[0].geometry.location.lng();

                // and then - add new custom marker
                var addrMarker = new google.maps.Marker({
                    position: addrLocation,
                    map: map,
                    title: results[0].formatted_address,
                    icon: 'marker.png'
                });
            } else {
                alert('Geocode was not successful for the following reason: ' + status);
            }
        });
    }

    // find custom places function
    function findPlaces() {

        // prepare variables (filter)
        var type = document.getElementById('gmap_type').value;
        var radius = document.getElementById('gmap_radius').value;
        var keyword = document.getElementById('gmap_keyword').value;

        var lat = document.getElementById('lat').value;
        var lng = document.getElementById('lng').value;
        var cur_location = new google.maps.LatLng(lat, lng);

        // prepare request to Places
        var request = {
            location: cur_location,
            radius: radius,
            types: [type]
        };
        if (keyword) {
            request.keyword = [keyword];
        }

        // send request
        service = new google.maps.places.PlacesService(map);
        service.search(request, createMarkers);
    }

    // create markers (from 'findPlaces' function)
    function createMarkers(results, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {

            // if we have found something - clear map (overlays)
            clearOverlays();

            // and create new markers by search result
            for (var i = 0; i < results.length; i++) {
                createMarker(results[i]);
            }
        } else if (status == google.maps.places.PlacesServiceStatus.ZERO_RESULTS) {
            alert('Sorry, nothing is found');
        }
    }

    // creare single marker function
    function createMarker(obj) {

        // prepare new Marker object
        var mark = new google.maps.Marker({
            position: obj.geometry.location,
            map: map,
            title: obj.name
        });
        markers.push(mark);

        // prepare info window
        var infowindow = new google.maps.InfoWindow({
            content: '<img src="' + obj.icon + '" /><font style="color:#000;">' + obj.name +
                    '<br />Rating: ' + obj.rating + '<br />Vicinity: ' + obj.vicinity + '</font>'
        });

        // add event handler to current marker
        google.maps.event.addListener(mark, 'click', function() {
            clearInfos();
            infowindow.open(map,mark);
        });
        infos.push(infowindow);
    }

    // initialization
    google.maps.event.addDomListener(window, 'load', initialize);

</script>
{% endblock %}

